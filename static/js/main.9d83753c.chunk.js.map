{"version":3,"sources":["utils/random-number-generator-util.js","components/Timer/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["UniqueRandomNumberGenerator","min","max","_this","this","Object","classCallCheck","insertInSortedArray","num","i","uniqueArray","length","splice","getNextRandomNumber","nextNumber","Math","floor","random","indexOf","checkLimit","resetGeneratorArray","Timer","possibleConstructorReturn","getPrototypeOf","call","_stopTimer","myGenerator","clearInterval","interval","_updateNumber","setState","curTime","Date","toLocaleString","deepNumber","state","setInterval","react_default","a","createElement","className","Component","App","components_Timer_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAqBA,SACnB,SAAAA,EAAYC,EAAKC,GAAK,IAAAC,EAAAC,KAAAC,OAAAC,EAAA,EAAAD,CAAAD,KAAAJ,GAAAI,KAYtBG,oBAAsB,SAAAC,GAEpB,IADA,IAAIC,EAAI,EACDA,EAAIN,EAAKO,YAAYC,QAAUR,EAAKO,YAAYD,GAAKD,GAC1DC,IAEFN,EAAKO,YAAYE,OAAOH,EAAG,EAAGD,IAjBVJ,KAyBtBS,oBAAsB,WACpB,IAAIC,EAEJ,GACEA,EAAaC,KAAKC,MAChBb,EAAKF,IAAMc,KAAKE,UAAYd,EAAKD,IAAM,EAAIC,EAAKF,YAE3CE,EAAKO,YAAYQ,QAAQJ,IAAe,GAEjD,OAAOA,GAlCaV,KAqCtBe,WAAa,WACX,OAAOhB,EAAKO,YAAYC,SAAWR,EAAKD,KAtCpBE,KAyCtBgB,oBAAsB,WACpBjB,EAAKO,YAAYC,OAAS,GAzC1BP,KAAKM,YAAc,GACnBN,KAAKH,IAAMA,GAAO,EAClBG,KAAKF,IAAMA,GAAO,MCmEPmB,cAjEb,SAAAA,IAAc,IAAAlB,EAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAD,KAAAiB,IACZlB,EAAAE,OAAAiB,EAAA,EAAAjB,CAAAD,KAAAC,OAAAkB,EAAA,EAAAlB,CAAAgB,GAAAG,KAAApB,QA2BFqB,WAAa,WAEXtB,EAAKuB,YAAYN,sBACjBO,cAAcxB,EAAKyB,WA/BPzB,EAqCd0B,cAAgB,WACd,GAAI1B,EAAKuB,YAAYP,aAKnB,OAJAhB,EAAKsB,kBACLtB,EAAK2B,SAAS,CACZC,QAAS,eAKb5B,EAAK2B,SAAS,CACZC,SAAS,IAAIC,MAAOC,iBACpBC,WAAY/B,EAAKuB,YAAYb,yBA9C/BV,EAAKgC,MAAQ,CACXJ,SAAS,IAAIC,MAAOC,kBAEtB9B,EAAKuB,YAAc,IAAI1B,EALXG,mFAYZC,KAAKwB,SAAWQ,YAAYhC,KAAKyB,cAAe,kDAO5CzB,KAAKsB,YAAYP,cAGrBf,KAAKsB,YAAYnB,oBAAoBH,KAAK+B,MAAMD,6CAkChD,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQpC,KAAK+B,MAAMJ,SAClCM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBpC,KAAK+B,MAAMD,oBA5D/BO,aCULC,0LARX,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACI,EAAD,cAJUF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d83753c.chunk.js","sourcesContent":["export default class UniqueRandomNumberGenerator {\n  constructor(min, max) {\n    this.uniqueArray = [];\n    this.min = min || 0;\n    this.max = max || 5000;\n  }\n\n  /**\n   * Maintains an ordered array such that collisions are\n   * identified faster while generating the next random number.\n   *\n   * @param {number} num - The next number to be inserted in list of unique elements.\n   */\n  insertInSortedArray = num => {\n    let i = 0;\n    while (i < this.uniqueArray.length && this.uniqueArray[i] < num) {\n      i++;\n    }\n    this.uniqueArray.splice(i, 0, num);\n  };\n\n  /**\n   * Gets a unique random number within given range.\n   *\n   * @returns {number} - The unique random number.\n   */\n  getNextRandomNumber = () => {\n    let nextNumber;\n\n    do {\n      nextNumber = Math.floor(\n        this.min + Math.random() * (this.max + 1 - this.min)\n      );\n    } while (this.uniqueArray.indexOf(nextNumber) >= 0);\n\n    return nextNumber;\n  };\n\n  checkLimit = () => {\n    return this.uniqueArray.length === this.max;\n  };\n\n  resetGeneratorArray = () => {\n    this.uniqueArray.length = 0;\n  };\n}\n","import React, { Component } from \"react\";\nimport \"./Timer.css\";\n\nimport UniqueRandomNumberGenerator from \"../../utils/random-number-generator-util\";\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      curTime: new Date().toLocaleString()\n    };\n    this.myGenerator = new UniqueRandomNumberGenerator();\n  }\n\n  /**\n   * Sets the interval to 2 seconds and saves its id to clear later.\n   */\n  componentDidMount() {\n    this.interval = setInterval(this._updateNumber, 2000);\n  }\n\n  /**\n   * Keeps an eye on range and calls _insertInSortedArray for current random number.\n   */\n  componentDidUpdate() {\n    if (this.myGenerator.checkLimit()) {\n      return;\n    }\n    this.myGenerator.insertInSortedArray(this.state.deepNumber);\n  }\n\n  /**\n   * Stops interval.\n   */\n  _stopTimer = () => {\n    // Truncate the array, clear interval\n    this.myGenerator.resetGeneratorArray();\n    clearInterval(this.interval);\n  };\n\n  /**\n   * Updates the state of component with a new random number until the range is exhausted.\n   */\n  _updateNumber = () => {\n    if (this.myGenerator.checkLimit()) {\n      this._stopTimer();\n      this.setState({\n        curTime: \"Get a life\"\n      });\n      return;\n    }\n\n    this.setState({\n      curTime: new Date().toLocaleString(),\n      deepNumber: this.myGenerator.getNextRandomNumber()\n    });\n  };\n\n  /**\n   * Displays time after each interval and the random number.\n   */\n  render() {\n    return (\n      <div>\n        <div className=\"time\">{this.state.curTime}</div>\n        <div className=\"random-number\">{this.state.deepNumber}</div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\n\nimport Timer from \"./Timer/Timer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"timer\">\n        <Timer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}