{"version":3,"sources":["components/Timer/Timer.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_getNumberUsingArray","arguments","length","undefined","_getUniqueRandomNumber","min","max","deepNumber","Math","floor","random","window","console","log","uniqueRandomNumbers","has","add","_updateNumber","size","setState","finalMessage","clearInterval","interval","curTime","Date","toLocaleString","state","Set","setInterval","react_default","a","createElement","Component","App","className","components_Timer_Timer","href","target","rel","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAuEeA,cApEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,qBAAuB,WAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAAA,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAXlCR,EAadW,uBAAyB,WAAyB,IAAxBC,EAAwBJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlB,EAAGK,EAAeL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,IACnCM,EAAaC,KAAKC,MAAMJ,EAAMG,KAAKE,UAAYJ,EAAM,EAAID,IAE7D,IADAM,OAAOC,QAAQC,IAAI,sBACZpB,EAAKqB,oBAAoBC,IAAIR,IAElCI,OAAOC,QAAQC,IAAIN,GACnBA,EAAaC,KAAKC,MAAMJ,EAAMG,KAAKE,UAAYJ,EAAM,EAAID,IAG3D,OADAZ,EAAKqB,oBAAoBE,IAAIT,GACtBA,GAtBKd,EAyBdwB,cAAgB,WACd,GAAIxB,EAAKqB,oBAAoBI,MAAQ,IAMnC,OALAP,OAAOC,QAAQC,IAAI,iCACnBpB,EAAK0B,SAAS,CACZC,aAAc,oBAEhBC,cAAc5B,EAAK6B,UAIrB,IAAIf,EAAad,EAAKW,yBACtBX,EAAK0B,SAAS,CACZI,SAAS,IAAIC,MAAOC,iBACpBlB,gBApCFd,EAAKiC,MAAQ,CACXH,QAAS,MAGX9B,EAAKqB,oBAAsB,IAAIa,IANnBlC,mFA4CZG,KAAK0B,SAAWM,YAAYhC,KAAKqB,cAAe,mDAIhDN,OAAOC,QAAQC,IAAI,iBACnBQ,cAAczB,KAAK0B,2CAMnB,OACEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKnC,KAAK8B,MAAMH,SAChBM,EAAAC,EAAAC,cAAA,UACGnC,KAAK8B,MAAMN,aACRxB,KAAK8B,MAAMN,aACXxB,KAAK8B,MAAMnB,oBA9DLyB,aCuBLC,0LAlBX,OACEJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAACI,EAAD,MACAN,EAAAC,EAAAC,cAAA,KACEG,UAAU,WACVE,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,wBANQN,cCOEO,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6fec194.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      curTime: null\n    };\n\n    this.uniqueRandomNumbers = new Set();\n\n    // this.range = [1 ... 5000];\n  }\n\n  _getNumberUsingArray = (min = 1, max = 5000) => {};\n\n  _getUniqueRandomNumber = (min = 1, max = 5000) => {\n    let deepNumber = Math.floor(min + Math.random() * (max + 1 - min));\n    window.console.log(\"repeated numbers: \");\n    while (this.uniqueRandomNumbers.has(deepNumber)) {\n      // do something to fetch a unique number\n      window.console.log(deepNumber);\n      deepNumber = Math.floor(min + Math.random() * (max + 1 - min));\n    }\n    this.uniqueRandomNumbers.add(deepNumber);\n    return deepNumber;\n  };\n\n  _updateNumber = () => {\n    if (this.uniqueRandomNumbers.size >= 5000) {\n      window.console.log(\"This is all there for a life.\");\n      this.setState({\n        finalMessage: \"Get a life\"\n      });\n      clearInterval(this.interval);\n      return;\n    }\n\n    let deepNumber = this._getUniqueRandomNumber();\n    this.setState({\n      curTime: new Date().toLocaleString(),\n      deepNumber\n    });\n    //  Math.random() * (max - min + 1) + min; This is for decimals\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(this._updateNumber, 20);\n  }\n\n  componentWillUnmount() {\n    window.console.log(\"clearInterval\");\n    clearInterval(this.interval);\n  }\n\n  // use componentDidUpdate to update the set?\n\n  render() {\n    return (\n      <div>\n        <h2>{this.state.curTime}</h2>\n        <h2>\n          {this.state.finalMessage\n            ? this.state.finalMessage\n            : this.state.deepNumber}\n        </h2>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\n\nimport Timer from \"./Timer/Timer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Timer />\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}